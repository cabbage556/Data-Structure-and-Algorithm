# n번째 피보나치 수 구하기
#       재귀 함수로 구현
#       시간 복잡도: O(2^N)
#           함수 호출마다 2번 재귀 호출(하위 문제 중첩)
def fib(n):
    # 호출 횟수 확인
    print('recursion')

    if n == 0 or n == 1:
        return n

    # 첫 번째 재귀 호출, 두 번째 재귀 호출(하위 문제 중첩)
    #       이미 첫 번째 재귀 호출 과정에서 계산한 결과가 존재하지만,
    #       두 번째 재귀 호출 과정은 이와 관계 없이 동일한 계산 결과를 얻는 함수를 재귀 호출함
    return fib(n - 2) + fib(n - 1)


print(fib(5))